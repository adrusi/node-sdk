// Generated by CoffeeScript 1.10.0
(function() {
  var PaginationStream, TransloaditClient, reqr, stream,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  reqr = global.GENTLY ? GENTLY.hijack(require) : require;

  TransloaditClient = reqr("./TransloaditClient");

  stream = reqr("stream");

  PaginationStream = (function(superClass) {
    extend(PaginationStream, superClass);

    function PaginationStream(_fetchPage) {
      this._fetchPage = _fetchPage;
      PaginationStream.__super__.constructor.call(this, {
        objectMode: true
      });
      this._pageno = 0;
      this._items = [];
      this._itemsRead = 0;
    }

    PaginationStream.prototype._read = function() {
      if (this._items.length > 0) {
        this._itemsRead++;
        return process.nextTick((function(_this) {
          return function() {
            return _this.push(_this._items.pop());
          };
        })(this));
      }
      if ((this._nitems != null) && this._itemsRead >= this._nitems) {
        return process.nextTick((function(_this) {
          return function() {
            return _this.push(null);
          };
        })(this));
      }
      return this._fetchPage(++this._pageno, (function(_this) {
        return function(err, result) {
          var i;
          if (err != null) {
            return _this.emit("error", err);
          }
          _this._nitems = result.count;
          _this._items = (function() {
            var j, ref, results;
            results = [];
            for (i = j = ref = result.items.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
              results.push(result.items[i]);
            }
            return results;
          })();
          return _this._read();
        };
      })(this));
    };

    return PaginationStream;

  })(stream.Readable);

  module.exports = PaginationStream;

}).call(this);
